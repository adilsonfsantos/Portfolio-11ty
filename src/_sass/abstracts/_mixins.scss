//MEDIA QUERIES
@mixin viewport($size, $width: width) {
  @if not(index(map-keys($grid-breakpoints-map), $size)) {
    @warn 'Atenção: `#{$size}` não é um breakpoint válido.';
  } @else {
    @media (min-width: #{map-get(map-get($grid-breakpoints-map, $size), $width)}) {
      @content;
    }
  }
}
//ASPECT RATIO PARA AS IMAGENS CARREGADAS
@mixin aspect-ratio($width, $height) {
  padding-top: ($height / $width) * 100%;
}
//LAYOUT
@mixin flex {
  display: flex;
}

@mixin inline {
  display: inline-block;
}

@mixin grid {
  display: grid;
}

@mixin flex--column {
  flex-direction: column;
}

@mixin flex--center {
  align-items: center;
  justify-content: center;
}

@mixin grid--base {
  grid-template-columns: minmax(5vw, 1fr) minmax(0, 1280px) minmax(5vw, 1fr);
}

@mixin grid--image {
  grid-template-columns: minmax(5vw, 1fr) minmax(0, 1024px) minmax(5vw, 1fr);
}

@mixin layout--grid($size, $column: column, $margin: margin) {
  @if not(index(map-keys($grid-breakpoints-map), $size)) {
    @warn 'Atenção: `#{size}` não é um breakpoint válido.';
  } @else {
    column-gap: #{map-get(map-get($grid-breakpoints-map, $size), $margin)};
    grid-template-columns: repeat(
      #{map-get(map-get($grid-breakpoints-map, $size), $column)},
      minmax(0, 1fr)
    );
  }
}

@mixin grid--post {
  grid-template-columns: minmax(0, 540px);

  @include viewport(sm-small) {
    grid-template-columns: 1fr minmax(0, 540px) 1fr;
  }
}

//MARGINS
@mixin center--horizontal {
  margin: 0 auto;
}

@mixin center--vertical {
  margin: auto 0;
}

@mixin center {
  margin: auto;
}

@mixin skeleton () {
  @include animation(skeleton, 1.6s, ease-in-out, infinite);
  animation-fill-mode: forwards;
  background: linear-gradient(to right, $white 0%, $accent 20%, $white 100%);
}

// COLORS
@mixin color($property, $color, $background, $type) {
  $value: map-get(map-get($elevation-map, $type), overlay);
  $percent: alpha($color) * $value;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$property}: $solid-color;
}

@mixin gradient($deg, $start-color, $end-color) {
  background: linear-gradient($deg, $start-color, $end-color);
}

//FONT ELEMENTS

@mixin font-responsive($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $unit-01: unit($min-vw);
  $unit-02: unit($max-vw);
  $unit-03: unit($min-font-size);
  $unit-04: unit($max-font-size);
  $a: -0.0223;
  $b: 0.185;
  $c: -0.1745;
  $min-spacing: $a + $b * ($c * $min-font-size);
  $max-spacing: $a + $b * ($c * $max-font-size);
  $spacing: calc(
    #{$min-spacing} + #{strip-unit($max-spacing - $min-spacing)} *
      ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
  );
  @if $unit-01 == $unit-02 and $unit-01 == $unit-03 and $unit-01 == $unit-04 {
    & {
      font-size: $min-font-size;
      letter-spacing: $min-spacing;

      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
        letter-spacing: $spacing;
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
        letter-spacing: $max-spacing;
      }
    }
  }
}

@mixin spacing($font-size) {
  $a: -0.0223;
  $b: 0.185;
  $c: -0.1745;
  $spacing: $a + $b * ($c * $font-size);

  letter-spacing: $spacing;
}

@mixin font--color($color, $opacity) {
  @if $opacity == primary {
    color: transparentize($color, 0.13);
  } @else if $opacity == secondary {
    color: transparentize($color, 0.4);
  } @else if $opacity == terciary {
    color: transparentize($color, 0.62);
  }
}

@mixin font--primary {
  font-display: swap;
  font-family: "Inter", -apple-system, BlinkMacSystemFont, Helvetica Neue,
    Roboto, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji,
    Segoe UI Symbol, Noto Color Emoji;
}

@mixin font--position($position) {
  @if $position == center {
    text-align: center;
  } @else if $position == right {
    text-align: right;
  } @else if $position == left {
    text-align: left;
  }
}

@mixin font--shadow($color) {
  text-shadow: 1px 1px 6px rgba($black, 0.3);
}

@mixin font--weight($weight) {
  @if $weight == regular {
    font-weight: 400;
  } @else if $weight == bold {
    font-weight: 600;
  }
}

//ANIMATION
@mixin transition($name: all, $duration: $elevation-transition-duration, $speed: $animation-standard, $delay: 0ms) {
  transition: $name $duration $speed $delay;
}

@mixin animation($name, $duration: $elevation-transition-duration, $speed: $animation-standard, $loop: 1, $delay: 0ms) {
  animation: $name $duration $speed $loop;
}

@mixin radius($range) {
  border-radius: $range * 1rem;
}

@mixin absolute {
  content: "";
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

// Remove the unit of a length
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@mixin elevation(
  $level,
  $background,
  $shadow: true,
  $color: $elevation-baseline-color,
  $overlay: $elevation-overlay-color,
  $opacity-boost: 0
) {
  $z-elevation: map-get(map-get($elevation-map, $level), elevation);
  $z-overlay: map-get(map-get($elevation-map, $level), overlay);
  @if $shadow == false {
    /* return */
  } @else {
    $z-value: strip-unit($z-elevation);

    @if $z-value < 0 or $z-value > 24 {
      @error '$z-value deve estar entre 0 e 24, mas recebeu  '#{$z-value}'';
    }

    $umbra-z-value: map-get($elevation-umbra-map, $z-value);
    $penumbra-z-value: map-get($elevation-penumbra-map, $z-value);
    $ambient-z-value: map-get($elevation-ambient-map, $z-value);

    $umbra-color: rgba($color, $elevation-umbra-opacity + $opacity-boost);
    $penumbra-color: rgba($color, $elevation-penumbra-opacity + $opacity-boost);
    $ambient-color: rgba($color, $elevation-ambient-opacity + $opacity-boost);

    box-shadow: (
      #{$umbra-z-value} #{$umbra-color},
      #{$penumbra-z-value} #{$penumbra-color},
      #{$ambient-z-value} $ambient-color
    );
  }

  @if $background == "none" {
    /* return */
  } @else if $overlay == "none" {
    background-color: $background;
  } @else {
    $percent: alpha($overlay) * $z-overlay;
    $opaque: opacify($overlay, 1);
    $solid-color: mix($overlay, $background, $percent);
    background-color: $solid-color;
  }
}
